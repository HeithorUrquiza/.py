► NUMPY ◄

>> Um pacote fundamental para ciência da computação em Python



>> ndarray(core do NumPy) vs standard python
	- ndarray possui tamanho fixo, diferente do tamanho dinâmico do python
	- ndarray os dados são homogêneos(mesmo tipo) x heterogêneo(tipos diferentes)
	- facilita cálculos matemáticos de uma grande quantidade de dados x programação tradicional
	- desempenho infinitamente melhor(otimização na compilação)
	- consumo de memória eficiente(menos memória consumida)
	


>> MULTIPLICANDO ARRAYS COM NUMPY
    '''
    import numpy as np
    primeiro = [2, 3, 4]
    segundo = [5, 7, 8]

    num_primeiro = np.array(primeiro)
    num_segundo = np.array(segundo)
    num_resultado = num_primeiro * num_segundo

    print(num_resultado)
    '''

    - Vectorization: ausência de qualquer uso explícito de estrutura de laço
        • "Behind the scenes" código otimizado / pré-compilado
    
    - Muito mais rápido que a multiplicação normal do python



>> ARRAYS 1D, 2D e 3D
    
    import numpy as np

    array1d = np.arange(10)
    print(array1d)
    print(array1d.ndim)

    print('------------------')
    array2d = np.arange(10).reshape(2, 5)
    print(array2d)
    print(array2d[1, 2])
    print(array2d.ndim)

    print('------------------')
    array3d = np.arange(24).reshape(2, 3, 4)
    print(array3d)
    print(array3d.ndim)
    

    • Exemplo prático (Média de idades)

        import numpy as np

        anos_nascimento = np.loadtxt('C:\\Users\\heith\\OneDrive\\Documentos\\GitHub\\Python_cods\\forfun\\anos.txt')
        idades = 2021 - anos_nascimento

        media = idades.sum() / idades.size
        print(media)



>> PEGUINHA
    - Forma correta: np.array([1, 2, 3, 4]) → Recebe como parêmtro um array

_________________________________________________________________________________________________________________________________

► SCIPY ◄
    - Coleção de algoritmos matemáticos e funções pré construídas em cima do NumPy
    - Manipular e visualizar dados
    - Funções matemáticas disponiveis
        → airy, elliptic, bessel, gamma, beta, hypergeometric, parabolic, cylinder, mathieu, spheroidal wave, struve and kelvin

_________________________________________________________________________________________________________________________________

► MATPLOTLIB ◄ 
    - Plotar gráficos
    - Criação de gráficos



>> CRIANDO UM GRÁFICO

    dados = np.linspace(0, 100, 80) #Inicio, final e altura


    plt.bar(['bacen', 'tcu', 'bb', 'stf'], [10, 20, 15, 34])
    plt.show()

    plt.pie([10, 20, 15, 34], labels=['bacen', 'tcu', 'bb', 'stf'])
    plt.legend()
    plt.show()



    plt.subplot(1, 2, 1) #Posicionar os gráfico (linha, coluna, qual gráfico)
    plt.plot([1, 2, 3, 4], [2, 5, 3, 9], 
            label='vendas',
            marker='o',
            linestyle='dotted',
            color='r')
            
    plt.xlabel('dias')
    plt.ylabel('quantidade de vendas')
    plt.legend()
    plt.title('Gráfico de Vendas por Dia')
    plt.grid()         
            
    plt.subplot(1, 2, 2)
    plt.plot([1, 2, 3, 4], [3, 2, 5, 8],
            label= 'Média Geral',
            color='green')

    plt.title('Média de vendas')
    plt.legend()

    plt.suptitle('Relatório de Vendas Anual') #Dá nome à página como um todo
    plt.show()

_________________________________________________________________________________________________________________________________

► PANDAS ◄
    - Ferramenta poderosa para analise de dados
    - timeSeries (tempos em séries)



>> CONCEITOS BÁSICOS
    import numpy as np
    import pandas as pd

    # Series
    list_python = [10, 20, 30, 40 , 50]
    pandas_series = pd.Series(list_python, ['dia_1', 'dia_2', 'dia_3', 'dia_4', 'dia_5'])

    print(pandas_series[2])
    print(pandas_series['dia_3']) #Buscando valor através da chave
    print(pandas_series.dia_3) 
    print(pandas_series + 1)
    print(pandas_series.median())


    # Data Frame
    dados_concursos = {
        'banca': ['cespe', 'cesgranrio'],
        'instituição': ['tcu', 'bb'],
        'salario': [25000, 3300],
        'data da prova': [pd.to_datetime('20/01/18'),
                        pd.to_datetime('10/09/21')]
    }

    tabela_concursos = pd.DataFrame(dados_concursos)
    print(tabela_concursos)
    print(tabela_concursos.dtypes)


    alunos = [
        ['Raphael', 10, True],
        ['Nodico', 7, True],
        ['Caliman', 4, False]
    ]

    escola = pd.DataFrame(alunos, columns=['Nome', 'Nota', 'Aprovado'])
    print(escola)



>> PRATICANDO UM POUCO
    - Pesquisando os últimos concursos

        import pandas as pd
        import numpy as np

        concursos = pd.read_csv('C:\\Users\\heith\\OneDrive\\Documentos\\GitHub\\Python_cods\\forfun\\BB\\concursos.csv', ';')

        print(concursos)
        print(concursos.salario) #Print 'exclusivo'

        bancas = concursos['banca']
        bancas.drop_duplicates(inplace=True)
        bancas.index = ['primeiro', 'segundo', 'terceiro', 'quarto']

        bancas = bancas.append(pd.Series(['fgv', 'quadrix'], #Adicionando novos dados
                                        index=['tensa', 'nova']))

        print(bancas.isin(bancas))
        print(concursos.banca.isin(bancas))

        print(concursos.info()) #Informações sobre o DataFrame
        print(concursos.head()) #Mostra os 5 primeiros elem por padrão tail() mostra os últimos 5

_________________________________________________________________________________________________________________________________

► SCIKIT LEARN ◄
    → Biblioteca para aprendizado de máquina
    - Classificação
    - Regressão / Predição
    - Associação
    - Agrupamento



>> EXEMPLO DE APRENDIZADO DE MÁQUINA COM BANCO DE TESTES
    from sklearn import datasets
    from sklearn.model_selection import train_test_split
    from sklearn.neighbors import KNeightborsClassifier

    iris = datasets.load_iris()
    X, y = iris.data, iris.target

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_stata=42)

    knn = KNeightborsClassifier(n_neighbors=3) #Pega os 'vizinhos' mais próximos e classifica o ponto(dado)

    knn.fit(X_train, y_train) #Constroi o modelo de treino

    test_accuracy = knn.score(X_test, y_test)

    predicition = knn.predict(X_test) #Previsão de novos dados



>> APRENDIZADO DE MÁQUINA
    - Supervisionado: Labels/rótulos estão definidos na base de dado
        • Modelo de predição (ex: SVM, Regressão, KNN, Bayesiano)
        • Palavra chave: classificar

    - Não supervisionado: Rótulos não estão definidos
        • Modelo descritivo (ex: K-Means{Agrupmaento ou Clusterização})

    - Semi-supervisionado: Apenas parte dos rótulos estão definidos
    - Por reforço: Se aprimora com feedbacks do ambiente real

_________________________________________________________________________________________________________________________________

► BANCO DE DADOS ◄

>> CHAVE PRIMÁRIA
    - Unicidade
    - Irredutibilidade
    - A escolhida
    - Simples ou Composta
    - Não pode ter valores nulos

→ Chaves estrangeiras: presente apenas em modelos relacionais (tabelas)



>> Normalização: reduz a redundância e as anomalias de atualização
    - 1FN: Colunas atômicas
    - 2FN: Sem chaves primárias compostas (dependência parcial)
    - 3FN: Sem dependências funcionais transitivas

_________________________________________________________________________________________________________________________________

► BIG DATA ◄
    - Conjunto de dados cuja escala, diversidade e complexidade exigem novas arquiteturas, técnicas, algoritmos e análises para gerenciá-lo e extrair valor deles e conhecimento oculto



>> OS 5V'S DE BIG DATA
    - Volume: Dados em repouso
    - Velocidade: Dados em movimento
    - Variedade: Dados em diferentes formas
    - Veracidade: Dados em dúvida
    - Valor: Dados em dinheiro



>> MONGO DB
    - Banco de Dados orientado a documentos
    - Facilita o dimensionamento
    - Um mecanismo de particionamento baseado em intervalo conhecido como sharding