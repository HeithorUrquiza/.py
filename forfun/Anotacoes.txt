► NUMPY ◄

>> Um pacote fundamental para ciência da computação em Python



>> ndarray(core do NumPy) vs standard python
	- ndarray possui tamanho fixo, diferente do tamanho dinâmico do python
	- ndarray os dados são homogêneos(mesmo tipo) x heterogêneo(tipos diferentes)
	- facilita cálculos matemáticos de uma grande quantidade de dados x programação tradicional
	- desempenho infinitamente melhor(otimização na compilação)
	- consumo de memória eficiente(menos memória consumida)
	


>> MULTIPLICANDO ARRAYS COM NUMPY
    '''
    import numpy as np
    primeiro = [2, 3, 4]
    segundo = [5, 7, 8]

    num_primeiro = np.array(primeiro)
    num_segundo = np.array(segundo)
    num_resultado = num_primeiro * num_segundo

    print(num_resultado)
    '''

    - Vectorization: ausência de qualquer uso explícito de estrutura de laço
        • "Behind the scenes" código otimizado / pré-compilado
    
    - Muito mais rápido que a multiplicação normal do python



>> ARRAYS 1D, 2D e 3D
    
    import numpy as np

    array1d = np.arange(10)
    print(array1d)
    print(array1d.ndim)

    print('------------------')
    array2d = np.arange(10).reshape(2, 5)
    print(array2d)
    print(array2d[1, 2])
    print(array2d.ndim)

    print('------------------')
    array3d = np.arange(24).reshape(2, 3, 4)
    print(array3d)
    print(array3d.ndim)
    

    • Exemplo prático (Média de idades)

        import numpy as np

        anos_nascimento = np.loadtxt('C:\\Users\\heith\\OneDrive\\Documentos\\GitHub\\Python_cods\\forfun\\anos.txt')
        idades = 2021 - anos_nascimento

        media = idades.sum() / idades.size
        print(media)



>> PEGUINHA
    - Forma correta: np.array([1, 2, 3, 4]) → Recebe como parêmtro um array

_________________________________________________________________________________________________________________________________

► SCIPY ◄
    - Coleção de algoritmos matemáticos e funções pré construídas em cima do NumPy
    - Manipular e visualizar dados
    - Funções matemáticas disponiveis
        → airy, elliptic, bessel, gamma, beta, hypergeometric, parabolic, cylinder, mathieu, spheroidal wave, struve and kelvin

_________________________________________________________________________________________________________________________________

► MATPLOTLIB ◄ 
    - Plotar gráficos
    - Criação de gráficos


>> CRIANDO UM GRÁFICO

    dados = np.linspace(0, 100, 80) #Inicio, final e altura


    plt.bar(['bacen', 'tcu', 'bb', 'stf'], [10, 20, 15, 34])
    plt.show()

    plt.pie([10, 20, 15, 34], labels=['bacen', 'tcu', 'bb', 'stf'])
    plt.legend()
    plt.show()



    plt.subplot(1, 2, 1) #Posicionar os gráfico (linha, coluna, qual gráfico)
    plt.plot([1, 2, 3, 4], [2, 5, 3, 9], 
            label='vendas',
            marker='o',
            linestyle='dotted',
            color='r')
            
    plt.xlabel('dias')
    plt.ylabel('quantidade de vendas')
    plt.legend()
    plt.title('Gráfico de Vendas por Dia')
    plt.grid()         
            
    plt.subplot(1, 2, 2)
    plt.plot([1, 2, 3, 4], [3, 2, 5, 8],
            label= 'Média Geral',
            color='green')

    plt.title('Média de vendas')
    plt.legend()

    plt.suptitle('Relatório de Vendas Anual') #Dá nome à página como um todo
    plt.show()

_________________________________________________________________________________________________________________________________

► PANDAS ◄
    - Ferramenta poderosa para analise de dados
    - timeSeries (tempos em séries)


>> CONCEITOS BÁSICOS
    import numpy as np
    import pandas as pd

    # Series
    list_python = [10, 20, 30, 40 , 50]
    pandas_series = pd.Series(list_python, ['dia_1', 'dia_2', 'dia_3', 'dia_4', 'dia_5'])

    print(pandas_series[2])
    print(pandas_series['dia_3']) #Buscando valor através da chave
    print(pandas_series.dia_3) 
    print(pandas_series + 1)
    print(pandas_series.median())


    # Data Frame
    dados_concursos = {
        'banca': ['cespe', 'cesgranrio'],
        'instituição': ['tcu', 'bb'],
        'salario': [25000, 3300],
        'data da prova': [pd.to_datetime('20/01/18'),
                        pd.to_datetime('10/09/21')]
    }

    tabela_concursos = pd.DataFrame(dados_concursos)
    print(tabela_concursos)
    print(tabela_concursos.dtypes)


    alunos = [
        ['Raphael', 10, True],
        ['Nodico', 7, True],
        ['Caliman', 4, False]
    ]

    escola = pd.DataFrame(alunos, columns=['Nome', 'Nota', 'Aprovado'])
    print(escola)


